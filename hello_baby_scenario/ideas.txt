Have variables that I need to fetch, variables I need to update, and update logic.

To fetch - baby data, scenario_text, mom_data
To update - babyPE, warmer, babyHealth, ventilation, CPR, UVC
logic

I update data by calling a task


scenario_text, supplies

"""
class PreemiePPVHealth(Health):
    def __init__(self, baby, vent, CPR, UVC):
        circ_eff=3
        vol_status=3
        card_health=3
        brain_health=3
        super().__init__(baby, vent, CPR, UVC, circ_eff, vol_status, card_health, brain_health)

    def updateCardiac(self, time):
        O2del=self.getO2Delivery()
        if time>60:
            goodO2Del=sum(O2Del[-12:]) #seconds of good O2 delivery in the last minute
            if (time-self.timeChanged)>60:
                if (goodO2Del<15):
                    self.card_health=max(0, self.card_health-1)
                    self.timeChanged=time
                # need to fix the case where time<120
                elif(sum(O2Del[-24:])<45 and goodO2Del<30): #if we've only had 30 seconds of good O2 in the past minute, and 45 in the past two minutes, we are in trouble.
                    self.card_health=max(0, self.card_health-1)
                    self.timeChanged=time
            elif goodO2Del>55:
                self.card_health=min(3, self.card_health+1)
                self.timeChanged=time



class PreemiePPVUpdate(BabyUpdate):
    def __init__(self, baby, health, warmer, supplyMGR):
        super().__init__(baby, health, warmer, supplyMGR)

    def loadData(self):
        super().loadData(PE)

    def updateResp(self, *args, **kwargs):
        resp=self.PE['resp']
        vent=self.vent
        if vent.type in ["mechanical", "PPV"]:
            resp.rate=vent.rate
            resp.breath_sounds="clear bilaterally"
            resp.grunting="None"
            if vent.efficacy=="good":
                resp.chest_rise="good"
            if vent.efficacy=="poor":
                resp.chest_rise="minimal chest rise"
                resp.breath_sounds="barely audible"
            if vent.efficacy=="none":
                resp.chest_rise="none"
                resp.breath_sounds="None"

        elif vent.type=="spontaneous":
            pass

        else:
            resp['breath_sounds']="None"
            resp['WOB']="None"
            resp['grunting']=False
            resp['spontaneous']=False
            resp['chest_rise']="None"
            resp['rate']=0
            self.vitals['RR']=0

    def updateCardiac(self, *args, **kwargs):
        pass

    def updateVitals(self, *args, **kwargs):
        pass

    def updateNeuro(self, *args, **kwargs):
        pass

    def updateSecretions(self, *args, **kwargs):
        pass


class PreemiePPVScenario(Scenario):
    def __init__(self):
        super().__init__()
        self.tasks={
            'fetch':self.supplyMGR.fetchSupply,
            'place':self.supplyMGR.placeSupply,
            'turnOn':self.warmer.turnOn,
            'useMask':self.supplyMGR.useMask,
       #    'dry':,
        #    'stimulate':,
         #   'suction':,

        }

    def loadBabyUpdate(self):
        self.vent=Ventilation(self.warmer)
        self.CPR=CPR()
        self.UVC=UVC()
        self.health=PreemiePPVHealth(self.baby, self.vent, self.CPR, self.UVC)
        self.babyUpdate=PreemiePPVUpdate(self.baby, self.health, self.warmer, self.supplyMGR)
        self.babyUpdate.loadData()

# temperature (turned on), suction, bag/mask, oxygen flow, baby timer
# supplies - ETT (sizes), masks, pulse ox, laryngoscope, hat, blankets, bulb suction, deep suction/meconium aspirator, preemie supplies


class Baby(JSONClass):
    def __init__(self, ga, nc):
        super().__init__()
        self.ga=ga
        self.nc=nc
        self.vitals=None
        self.PE=None
        self.delivered=False
        self.supplies={}

    def initialize(self, PE):
        self.PE=PE
        self.vitals=PE['vitals']

    def deliver(self):
        self.delivered=True

    def has(supplyName):
        for supply in self.supplies:
            if suppy.name==supplyName:
                return True
        return False

#need to write tests for all of these methods!!!
class Ventilation(JSONClass):
    def __init__(self, warmer):
        self.warmer=warmer
        self.type="spontaneous"
        self.efficacy=None
        self.mouthOpen=True
        self.positioning=None
        self.airwayOpen=None
        self.airLeak=None
        #self.rate, pressures, secretions, ETT type

    def startPPV(self):
        self.type="PPV"

    def stopPPV(self):
        self.type="spontaneous"

    def adjustMask(self):
        pass

    def openMouth(self):
        self.mouthOpen=True

    def reposition(self):
        pass

    def deepSuction(self):
        pass

    def setPressures(self, PIP, PEEP, POP):
        pass

    def intubate(self):
        self.type="mechanical"

    def extubate(self):
        self.type="PPV"

    def update(self, *args, **kwargs):
        pass


class CPR(JSONClass):
    def __init__(self):
        self.rate=0
        self.breathsToCompressions=None # [1, 3]
        self.CPRDepth=None #depth options are 1/6, 1/3, 1/2
        self.efficacy=None

    def startCPR(self, rate, BTC, depth):
        self.rate=rate
        self.breathsToCompressions=BTC
        self.CPRDepth=depth

    def stopCPR(self):
        self.rate=0

    def increaseDepth(self):
        pass

    def decreaseDepth(self):
        pass

    def setRate(self, rate):
        self.rate=rate

    def setRatio(self, depth):
        self.CPRDepth=depth

    def update(self, *args, **kwargs):
        pass

class UVC(JSONClass):
    def __init__(self):
        self.uvc_placed=False
        self.medicationsGiven=[]

    def placeUVC(self):
        self.uvc_placed=True

    def giveMed(self, medication, amount):
        pass

    def giveVolume(self, fluid, amount):
        pass

    def giveBlood(self, amount):
        pass

    def update(self, *args, **kwargs):
        pass

# circ_eff - 0-3 - 0 is none, 1 is poor, 2 is weak, 3 is excellent
# vol_status - 0-3 - 0 is severely decreased, 1 is moderately decreased, 2 is mildly decreased, 3 is normal
# card_health - 0-3 - (3 is the best)
# brain_health - 0-3 (this measure is probably too crude)

# eventually need to expand to include ventilation and oxygenation

class Health(JSONClass):
    def __init__(self, baby, vent, CPR, UVC, circ_eff, vol_status, card_health, brain_health):
        self.baby=baby
        self.vent=vent
        self.CPR=CPR
        self.UVC=UVC
        self.circ_eff=circ_eff #circulation efficacy

        self.oxygenation=[]
        self.circulation=[]
        self.ventilation=[]

        self.volume_status=vol_status
        self.card_health=card_health
        self.brain_health=brain_health
        self.timeChanged=0

    def update(self, time):
        self.updateO2(time)
        self.updateCirculation(time)
        self.updateCardiac(time)
        self.updateNeuro(time)

    def updateO2(self, time):
        ndelta=len(self.oxygenation)
        tdelta=time//5
        resp_eff=0
        if vent.efficacy=="good":
            resp_eff=1
        if tdelta>ndelta:
            for x in range(len(tdelta-ndelta)):
                self.oxygenation.append(resp_eff)

    def updateCirculation(self, time):
        ndelta=len(self.circulation)
        tdelta=time//5
        if tdelta>ndelta:
            for x in range(len(tdelta-ndelta)):
                self.circulation.append(self.circ_eff)

    def getO2Delivery(self):
        return [5*ox*circ/3.0 for ox,circ in zip(self.oxygenation, self.circulation)]

    def updateCardiac(self, time):
        pass

    def updateNeuro(self, time):
        pass


    def updateVitals(self):
        def updateHR():
            pass
        def updateRR():
            pass

        def updateTemp():
            temp=self.baby.vitals['temp']
            #if warmer not on, lose 0.05 C every 5 seconds until temp is 33
            #if warmer on and hat on, baby dry, GA high enough, gain 0.1 C every 5 seconds until temp is 37 (if baby mode is on)
            #if baby mode is off, temp keeps increasing to 39
            # if hat not on, baby not dry - temp stays at 35
            if not self.warmer.turnedOn:
                if temp>33:
                    self.baby.vitals['temp']=round(temp-0.05, 2)
            else:
                if ((self.baby.PE['skin']['dry?']) and (self.baby.has("hat"))):
                    if (self.warmer.tempMode=="manual" or temp<37):
                        self.baby.vitals['temp']=round(temp+0.05, 2)
                    if (self.warmer.tempMode=="baby" and temp>37):
                        self.baby.vitals['temp']=round(temp-0.05, 2)
                else:
                    if temp>34:
                        self.baby.vitals['temp']=round(temp-0.05, 2)




        def updateO2sat():
            pass

        updateHR()
        updateRR()
        updateTemp()
        updateO2sat()

    def updateSkin(self):
        if self.currentTaskName=="dry":
            self.baby.PE['skin']['dry?']=True

"""